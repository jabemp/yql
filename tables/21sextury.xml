<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="any" https="false">
   <bindings>
		<select itemPath="scenes.scene" produces="XML">
			<inputs>
				<key id="site" type="xs:string" paramType="path" required="true"/>
				<key id="time" type="xs:string" paramType="path" required="false"/>
		   </inputs>
			<execute><![CDATA[
				var domain = "21sextury.com";
				var path = "/en/";
				
				var baseurl = 'https://www.' + domain;
				
				var studios = {
				'analteenangels': 'Anal Teen Angels',
				'footsiebabes': 'Footsie Babes',
				'assholefever': 'Asshole fever',
				'clubsandy': 'Club Sandy',
				'dpfanatics': 'DPFanatics',
				'deepthroatfrenzy': 'Deepthroat Frenzy',
				'gapeland': 'Gapeland',
				'pixandvideo': 'Pix and Video',
				'lezcuties': 'Lezcuties'
				}
				
				var studio = studios[site.toLowerCase()];
				
				var xpath = '//li[contains(@class,"playlistable_scenes")]/div/span[.//p[@class="studioName"]/a[contains(text(),"' + studio + '")]]';


				var url = baseurl + path + 'videos';

				if(time == 'upcoming') {
					url = url + '/All-Categories/0/All-Pornstars/0/upcoming';
				}
				
				var html = y.rest(url).accept('text/html').get().response;
				var results = y.tidy(html);
				if (xpath) {
					results = <results>{y.xpath(results, xpath)}</results>;
				}
				//y.log(results);
				
				var niceList = function(array, join, finalJoin) {
					if (array.length == 1) return array[0];
					var arr = array.slice(0), last = arr.pop();
					join = join || ', ';
					finalJoin = finalJoin || ' & ';
					return arr.join(join) + finalJoin + last;    
				};
				function zeroFill( number, width ) {
				  width -= number.toString().length;
				  if ( width > 0 )
				  {
					return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
				  }
				  return number + ""; // always return a string
				}
				
				
				responseXML = <scenes></scenes>;
				function processScene(scenedata) {
					var scene = <scene></scene>;
					
					var scenelink = scenedata.a[0];
					//y.log(scenedata);
					try {
						var sceneurl = scenelink.@href.toString();
						scene.url += <url>{( sceneurl.substring(0, 4) == 'http' ? '' : baseurl ) + sceneurl}</url>;
					} catch(e) { y.log('url: ' + e);}
					
					try {
						var title = scenelink.@title.toString().replace(/\u00A0/g, ' ').trim();
						title = title.replace(/, Scene.+/gi,"");
						scene.title += <title>{title}</title>;
						//scene.titleclean += <titleclean>{title.replace(/[^a-z0-9- ]/gi,"").replace(/\s+/g, " ")}</titleclean>;
						scene.titlematch += <titlematch>{title.replace(/[^a-z0-9- ]/gi,"").replace(/\s+/g, " ").toLowerCase()}</titlematch>;
					} catch(e) { y.log('url: ' + e);}
					
					
					try {
						var releasedate = scenedata..p.(@class == "sceneDate").text().toString().trim();
						//09-19-2017
						var dateparts = releasedate.split('-');
						
						var date = new Date(dateparts[2], dateparts[0]-1, dateparts[1]);
									
						var datealtstring = date.getFullYear().toString().substring(2,4) + '.' + zeroFill(date.getMonth() + 1,2) + '.' + zeroFill(date.getDate(),2);
						scene.date = <date>{datealtstring}</date>;
						scene.dateiso += <dateiso>{date.toISOString().substring(0,10)}</dateiso>;
					} catch(e) { y.log('url: ' + e);}
					responseXML.scenes += scene;
				}
				for each (var scene in results.span) {
					processScene(scene);
				}
				response.object = responseXML;
			]]></execute>
		</select>
	</bindings>
</table>
